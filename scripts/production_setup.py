#!/usr/bin/env python3
"""
Production Setup Script for Smart Shopping Platform - Secure AWS Edition

This script automates the complete production setup of the smart shopping platform,
including environment validation, database setup, and service initialization.

Usage: python scripts/production_setup.py
"""

import os
import sys
import subprocess
import psycopg2
from pathlib import Path
import logging
from dotenv import load_dotenv

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('production_setup.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ProductionSetup:
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        load_dotenv(self.project_root / '.env')
        
    def check_requirements(self):
        """Check if all required environment variables are set"""
        logger.info("üîç Checking environment requirements...")
        
        required_vars = [
            'AWS_DB_HOST',
            'AWS_DB_PORT', 
            'AWS_DB_NAME',
            'AWS_DB_USER',
            'AWS_DB_PASSWORD',
            'JWT_SECRET_KEY'
        ]
        
        missing_vars = []
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            logger.error(f"‚ùå Missing required environment variables: {', '.join(missing_vars)}")
            logger.error("Please check your .env file and ensure all required variables are set.")
            return False
        
        logger.info("‚úÖ All required environment variables are set")
        return True
    
    def install_dependencies(self):
        """Install Python dependencies"""
        logger.info("üì¶ Installing Python dependencies...")
        
        try:
            subprocess.run([
                sys.executable, '-m', 'pip', 'install', '-r', 
                str(self.project_root / 'requirements.txt')
            ], check=True, capture_output=True, text=True)
            logger.info("‚úÖ Dependencies installed successfully")
            return True
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå Failed to install dependencies: {e}")
            return False
    
    def test_database_connection(self):
        """Test AWS PostgreSQL database connection"""
        logger.info("üîó Testing AWS PostgreSQL database connection...")
        
        try:
            conn = psycopg2.connect(
                host=os.getenv('AWS_DB_HOST'),
                port=os.getenv('AWS_DB_PORT'),
                database=os.getenv('AWS_DB_NAME'),
                user=os.getenv('AWS_DB_USER'),
                password=os.getenv('AWS_DB_PASSWORD')
            )
            conn.close()
            logger.info("‚úÖ Database connection successful")
            return True
        except Exception as e:
            logger.error(f"‚ùå Database connection failed: {e}")
            return False
    
    def setup_database_schema(self):
        """Setup database schema if needed"""
        logger.info("üóÑÔ∏è Setting up database schema...")
        
        try:
            # Import and run the database setup
            sys.path.append(str(self.project_root))
            from scripts.setup_aws_database import main as setup_db
            setup_db()
            logger.info("‚úÖ Database schema setup completed")
            return True
        except Exception as e:
            logger.error(f"‚ùå Database schema setup failed: {e}")
            return False
    
    def validate_application(self):
        """Validate that the application can start"""
        logger.info("üöÄ Validating application startup...")
        
        try:
            # Try to import the main application
            sys.path.append(str(self.project_root))
            import secure_aws_shopping
            logger.info("‚úÖ Application validation successful")
            return True
        except Exception as e:
            logger.error(f"‚ùå Application validation failed: {e}")
            return False
    
    def create_production_config(self):
        """Create production configuration file"""
        logger.info("‚öôÔ∏è Creating production configuration...")
        
        config_content = f"""# Smart Shopping Platform - Production Configuration
# Generated by production_setup.py

# Application Settings
APP_NAME=Smart Shopping Platform
APP_VERSION=1.0.0
ENVIRONMENT=production

# Security Settings
JWT_SECRET_KEY={os.getenv('JWT_SECRET_KEY')}
JWT_ALGORITHM=HS256
JWT_EXPIRATION_HOURS=24

# Database Settings
AWS_DB_HOST={os.getenv('AWS_DB_HOST')}
AWS_DB_PORT={os.getenv('AWS_DB_PORT')}
AWS_DB_NAME={os.getenv('AWS_DB_NAME')}
AWS_DB_USER={os.getenv('AWS_DB_USER')}
AWS_DB_PASSWORD={os.getenv('AWS_DB_PASSWORD')}

# Server Settings
HOST=0.0.0.0
PORT=8888
WORKERS=4

# Logging
LOG_LEVEL=INFO
LOG_FILE=smart_shopping_production.log
"""
        
        try:
            with open(self.project_root / 'config' / 'production.env', 'w') as f:
                f.write(config_content)
            logger.info("‚úÖ Production configuration created")
            return True
        except Exception as e:
            logger.error(f"‚ùå Failed to create production configuration: {e}")
            return False
    
    def run_setup(self):
        """Run the complete production setup"""
        logger.info("üöÄ Starting Smart Shopping Platform Production Setup...")
        logger.info("=" * 60)
        
        steps = [
            ("Environment Check", self.check_requirements),
            ("Install Dependencies", self.install_dependencies),
            ("Database Connection", self.test_database_connection),
            ("Database Schema", self.setup_database_schema),
            ("Application Validation", self.validate_application),
            ("Production Config", self.create_production_config)
        ]
        
        for step_name, step_func in steps:
            logger.info(f"\nüìã Step: {step_name}")
            if not step_func():
                logger.error(f"‚ùå Setup failed at step: {step_name}")
                return False
        
        logger.info("\n" + "=" * 60)
        logger.info("üéâ Production setup completed successfully!")
        logger.info("\nNext steps:")
        logger.info("1. Start the server: python scripts/quick_start.py")
        logger.info("2. Access web app: http://localhost:8888/frontend/")
        logger.info("3. Check API docs: http://localhost:8888/admin/docs")
        logger.info("4. Monitor logs: tail -f production_setup.log")
        
        return True

def main():
    """Main entry point"""
    setup = ProductionSetup()
    success = setup.run_setup()
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
